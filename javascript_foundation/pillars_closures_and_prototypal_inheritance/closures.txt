closures are simply combinations of functions and lexical scope from which it was declared.

Colsures allow a function to access variables from an enclosing scope or environment even after it leaves the scope in which it was declared.


ex:

```
function a() {
	let grandpa = 'grandpa'
	return function b() {
		let father = 'father'
		return function c() {
			let son = 'son'
			return `${grandpa} ${father} ${son}`
		}
	}
}

function a gets added to the executon stack and we have a variable environment. variables get added to the closure environment hence garbage collector doesn't clean up the closure variables. if the child function is using the variables of the parent function they wont get garbage collected.
Closures are also called as lexical scoping.
