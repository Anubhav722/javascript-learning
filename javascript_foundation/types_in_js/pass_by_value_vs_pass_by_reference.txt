primitive types in js are immutable

primitive types are passed by value

var a = 5;
var b = a;

b ++;
 console.log(a); // 5
console.log(b); // 6


for objects it is pass by reference

let obj1 = {
	name: 'yep',
	password: '123'
}

let obj2 = obj1

obj2.password = 'easypeasy'

console.log(obj1.password) // easypeasy


var c = [1,2,3,4,5]
var d = c

d.push(123123)
console.log(c) // 1,2,3,4,5,123123


to avoid passing by reference

var c = [1,2,3,4,5];
var d = [].concat(c)

d.push(123)
console.log(c) // 1,2,3,4,5


for objects

var obj = {a: 'a', b:'b'}
var a = Object.assign({}, obj)

obj.c = 5;
console.log(a) // {a: 'a', b:'b'}




this is always a shallow clone i.e. they only get copied till the first level.

for deep cloning

let deepClone = JSON.parse(JSON.stringify(obj))
