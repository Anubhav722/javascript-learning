REFLECTION:
An object can look at itself listing and changing it's properties and methods.

```
var person = {
	firstName: 'Default',
	lastName: 'Default',
	getFullName: function() {
		return this.firstName + ' ' + this.lastName;
	}
}

var john = {
	firstName: 'John',
	lastName: 'Doe'
}


// don't ever use this again
john.__proto__ = person;


for (var prop in john) {
	if (john.hasOwnProperty(prop)) {                // hasOwnProperty() is used to check if it property is from the own function, not a function down the proto chain.
		console.log(prop + ': ' + john[prop]);
	}
}


var jane = {
	address: "111 St. Main",
	blah: "abc abc abc
}

var jim = {
	designation: "Software Engineer",
}

_.extend(john, jane, jim)

console.log(john);

// _.extend actually creates has a  closure access
